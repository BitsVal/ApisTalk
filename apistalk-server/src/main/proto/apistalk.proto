syntax = "proto3";

package com.upuphub.apistalk;
option java_package = "com.upuphub.talk.server.protocol";
option java_multiple_files = true;
option optimize_for = SPEED;

enum CMD{

  //通用协议: 保留
  CMD_REQUEST = 0;
  CMD_RESPONSE = 1000;

  //通用协议: 服务与客户端之间的连接心跳
  CMD_HEARTBEAT_REQ = 1;
  CMD_HEARTBEAT_RSP = 1001;

  //通用协议: 服务与客户端传输保障请求-QoS
  CMD_QOS_RECEIVED_REQ = 2;
  CMD_QOS_RECEIVED_RSP = 1002;

  //通用协议: 服务请求消息回显
  CMD_ECHO_REQ = 3;
  CMD_ECHO_RSP = 1003;

  // 通用协议: 连接认证请求
  CMD_AUTHORIZATION_REQ = 4;
  CMD_AUTHORIZATION_RSP = 1004;
}

enum QoS{
  // 服务质量: 最多一次发送,可能会丢包
  QoS_AT_MOST_ONCE = 0;
  // 服务质量: 最少一次发送,可能重复报
  QoS_AT_LEAST_ONCE = 1;
  // 服务质量: 仅一次成功发送,实现成本高
  QoS_ONLY_ONCE = 2;
}

enum PROP{
  // 服务协议包额外携带的数据
  PP_ECHO = 0;
}

enum HANDLER_CODE{
  // 请求处理成功:返回Handler处理完成结果的回包
  HC_SUCCESS = 0;
  // 用户未授权:返回提示用户未授权的消息并关闭本次连接
  HC_UNAUTHORIZED = 1;
  // 处理失败警告:Handler对请求包体或版本判断不正常,返回警告返回,不关闭连接
  HC_WARNING = 2;
  // 处理发送预期以外的错误: 返回错误的消息提示并关闭本次连接
  HC_FAILED = 3;
}

enum IM_TYPE{
  // 对单
  IT_TO_P = 0;
  // 对群
  IT_TO_G = 1;
}

enum MESSAGE_CODE{
  // 消息处理完成的业务码: 未知(保留)
  MC_UNKNOWN = 0;
  // 消息处理完成的业务码: 处理成功
  MC_SUCCESS = 100;
  // 消息处理完成的业务码: 处理失败
  MC_FAILED = 200;
}


message ProtocolPackage{
  // 连接的socketHandlerId-Vert.X的HandlerId
  string socketHandlerId = 1;
  // 用与传输的消息协议
  Protocol protocol = 2;
  // 处理操作的结果码
  HANDLER_CODE handlerCode = 3;
  // 其他拓展的属性字段
  repeated Properties properties = 4;
}

message Properties{
  PROP type = 1;
  string value = 2;
}

message Header{
  // 协议定义的消息操作
  CMD cmd = 1;
  // 消息发起的来源
  string from = 2;
  // 消息到达的目的地址
  string to = 3;
  // 服务质量等级
  QoS qos = 4;
  // 该条消息的指纹，用于标识消息的唯一性
  string fingerPrint = 5;
  // 还能继续的重试次数
  uint32 retryCount = 6;
  // 及时消息类型-单聊、群聊
  IM_TYPE imType = 7;
}

message Status{
  // 消息处理的状态码
  MESSAGE_CODE code = 1;
  // 服务器、客户端的版本
  string version = 2;
  // 处理消息携带的message,用户拒绝服务的提示
  string message = 3;
  // 服务器的处理结束的时间,可用于同步本地和服务器时间
  int64 timestamp = 4;
}

message Protocol{
    // 用于传输的协议返回状态,客户端只读
    Status status = 1;
    // 协议头
    Header header = 2;
    // 协议中携带的内容数据
    bytes data = 3;
}

message AuthorizationReq{
  string token = 1;
}

message AuthorizationRsp{
}